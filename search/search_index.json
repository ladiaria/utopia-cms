{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Utop\u00eda CMS documentation About this documentation site Starting a documentation site for this project, the main goal is to create docs here as better as possible to help anyone who wants to install or use this Django project, but also this first (an minimal) version of the documentation site was created specially to write about the next release that will support from this commit and up, the basic integration with our another main project, Utop\u00eda CRM, both using its default installations and requiering only a few steps of configuration. So, the next section, will talk about this integration and of course, with the time, this documentation home page will include all the docs that we have now and the many others that we must create. TODO: make separated md files for each next ## and link them here. Utop\u00eda CRM integration This is an skel of steps that we will describe better on next commits, but is a good start point to have an idea on what are the things to do to obtain a deployment of Utop\u00eda CMS that can interoperate with a deployment of Utop\u00eda CRM. Install both projects, Utop\u00eda CRM and CMS, following the INSTALL.md docs in the root of each, and after having both systems up and running with admin access in front-end, and also access to modify the \"local settings\", continue to next step. Configure the url of each one in the other: In CRM local_settings.py assign the CMS root url in the setting LDSOCIAL_URL , example: LDSOCIAL_URL = \"https://yoogle.com/\" In CMS local_settings.py assign the CRM API base url in the setting CRM_API_BASE_URI , example: CRM_API_BASE_URI = 'http://localhost:8000/api/' On each django admin site, generate the API-Key to set in the local settings of the other project, the steps to follow are identically on each admin site, follow the djangorestframework-api-key docs to obtain both keys and then assign each one using this mapping: The key generated in the CMS must be assigned to the LDSOCIAL_API_KEY variable in CRM local_settings.py , example: LDSOCIAL_API_KEY = \"aTdKvX2p.qnqGZt6DYyJ8w8o5RsS15tF3eDI6Q8W0\" Do the same in the other admin site and assign the key to the CRM_UPDATE_USER_API_KEY variable in CMS local_settings.py , example: CRM_UPDATE_USER_API_KEY = \"uK9DmR4s.W3ZtF6y1nA3eD5gH7jK9mP1qRW3ZtF6y\" Enable the integration on each project assigning True to this local settings variables: In CMS local_settings.py : CRM_UPDATE_USER_ENABLED = True In CRM local_settings.py : WEB_UPDATE_USER_ENABLED = True Restart both servers and test the integration creating Users in CMS matching Contacts in CRM with the same email, then for example, when email is changed in one project, the change will be also performed in the other system, take a look also in the contact_id field of CMS Subscribers (`thedaily.models.Subscriber.contact_id) this is the \"link\" metadata with more precedence used by the apis who sync any object with its respective \"pair\". We hope have much more documentation in the next commits, for this topic and many others. Newsletters Intro TODO: write about what a NL is, how to preview and send Default content The default content of each newsletter can be modified by redefining the template of each newsletter. Additionally, by customizing the available settings for this functionality, many combinations of alternative content can be achieved. Over the years in production, we have made it possible to meet various requirements requested by editorial, sales, management, and other teams. Publications: Featured articles are selected, meaning those that would appear on the publication's cover. Areas: Priority is given to the \"area newsletter\" object that may exist with valid validity (there is a \"valid until\" datetime field) for the respective area. If the former is not valid or does not exist, articles from the \"area cover\" object associated with the respective area are then selected.","title":"Utop\u00eda CMS documentation"},{"location":"#utopia-cms-documentation","text":"","title":"Utop\u00eda CMS documentation"},{"location":"#about-this-documentation-site","text":"Starting a documentation site for this project, the main goal is to create docs here as better as possible to help anyone who wants to install or use this Django project, but also this first (an minimal) version of the documentation site was created specially to write about the next release that will support from this commit and up, the basic integration with our another main project, Utop\u00eda CRM, both using its default installations and requiering only a few steps of configuration. So, the next section, will talk about this integration and of course, with the time, this documentation home page will include all the docs that we have now and the many others that we must create. TODO: make separated md files for each next ## and link them here.","title":"About this documentation site"},{"location":"#utopia-crm-integration","text":"This is an skel of steps that we will describe better on next commits, but is a good start point to have an idea on what are the things to do to obtain a deployment of Utop\u00eda CMS that can interoperate with a deployment of Utop\u00eda CRM. Install both projects, Utop\u00eda CRM and CMS, following the INSTALL.md docs in the root of each, and after having both systems up and running with admin access in front-end, and also access to modify the \"local settings\", continue to next step. Configure the url of each one in the other: In CRM local_settings.py assign the CMS root url in the setting LDSOCIAL_URL , example: LDSOCIAL_URL = \"https://yoogle.com/\" In CMS local_settings.py assign the CRM API base url in the setting CRM_API_BASE_URI , example: CRM_API_BASE_URI = 'http://localhost:8000/api/' On each django admin site, generate the API-Key to set in the local settings of the other project, the steps to follow are identically on each admin site, follow the djangorestframework-api-key docs to obtain both keys and then assign each one using this mapping: The key generated in the CMS must be assigned to the LDSOCIAL_API_KEY variable in CRM local_settings.py , example: LDSOCIAL_API_KEY = \"aTdKvX2p.qnqGZt6DYyJ8w8o5RsS15tF3eDI6Q8W0\" Do the same in the other admin site and assign the key to the CRM_UPDATE_USER_API_KEY variable in CMS local_settings.py , example: CRM_UPDATE_USER_API_KEY = \"uK9DmR4s.W3ZtF6y1nA3eD5gH7jK9mP1qRW3ZtF6y\" Enable the integration on each project assigning True to this local settings variables: In CMS local_settings.py : CRM_UPDATE_USER_ENABLED = True In CRM local_settings.py : WEB_UPDATE_USER_ENABLED = True Restart both servers and test the integration creating Users in CMS matching Contacts in CRM with the same email, then for example, when email is changed in one project, the change will be also performed in the other system, take a look also in the contact_id field of CMS Subscribers (`thedaily.models.Subscriber.contact_id) this is the \"link\" metadata with more precedence used by the apis who sync any object with its respective \"pair\". We hope have much more documentation in the next commits, for this topic and many others.","title":"Utop\u00eda CRM integration"},{"location":"#newsletters","text":"","title":"Newsletters"},{"location":"#intro","text":"TODO: write about what a NL is, how to preview and send","title":"Intro"},{"location":"#default-content","text":"The default content of each newsletter can be modified by redefining the template of each newsletter. Additionally, by customizing the available settings for this functionality, many combinations of alternative content can be achieved. Over the years in production, we have made it possible to meet various requirements requested by editorial, sales, management, and other teams. Publications: Featured articles are selected, meaning those that would appear on the publication's cover. Areas: Priority is given to the \"area newsletter\" object that may exist with valid validity (there is a \"valid until\" datetime field) for the respective area. If the former is not valid or does not exist, articles from the \"area cover\" object associated with the respective area are then selected.","title":"Default content"},{"location":"mkdocs_original_index/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs_original_index/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs_original_index/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs_original_index/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}